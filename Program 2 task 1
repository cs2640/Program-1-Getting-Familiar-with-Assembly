#Name: CS 2640.01
#Team:Chenrui Zhang, Aaron lo,Brian Zeng
#Last Version:4/6/2023


#Task 1 Objectives:
#print out user menu
#print a main label, a looping label, and an exit label
#handing invalid input

.data
menu: .asciiz "\n\n~~~~~~~~~~~~~~~MAIN MENU~~~~~~~~~~~~~~~\n(1) Get letter grade\n(2)Exit Program\n\nEnter '1' or '2' for your selection: "
breakline: .asciiz "\n--------------------------------------\n"
askinputNumber: .asciiz "\nPlease enter a score as an interger value: "
printgrade:.asciiz "The grade is: "
#grade option for user display"
A: .asciiz "A\n"
B: .asciiz "B\n"
C: .asciiz "C\n"
D: .asciiz "D\n"
F: .asciiz "F\n"
printNewScoreSelection:.asciiz "Would you like to enter a new score?\n(Y)Yes   (N)No\nEnter 'Y' or 'N' for your selection: "
invalidInput:.asciiz "invalid Input, please enter a numbr between 1 and 2: \n"
printexit:.asciiz "The program will now exit.\n"
invalidgrade1:.asciiz "invalid Input, please enter a numbr between 1 to 100: \n"

.text
main:
#display the menu user
	li $v0, 4
	la $a0, menu
	syscall

#let user enter '1' or '2' for your selection 
       	li $v0, 5 
	syscall 
	move $t0, $v0	#stores user input into register $t0
#if 2 exit	
	beq $v0, 2, exit
#branch to check if user input is less than 1 or greater than 2
	blt $t0, 1, invalid
	bgt $t0, 2, invalid
	
	
	
loop:	

	#breakline
	li $v0, 4
	la $a0, breakline
	syscall
	
	# Print the prompt
 	li $v0, 4
        la $a0, askinputNumber
        syscall
	# Get the decimal grade from the user
        li $v0, 5
        syscall
        move $t1, $v0	#stores user input into register $t1
        
	blt $t1, 1, invalidgrade
	bgt $t1, 100, invalidgrade
	#branch to check if user input is A, B, C, or D
	bgt $v0, 89, a
        bgt $v0, 79, b
        bgt $v0, 69, c
        bgt $v0, 59, d
        j f
        
a:	

	# Print the prompt
 	li $v0, 4
        la $a0, printgrade
        syscall
        #print A
        li $v0, 4
        la $a0, A
        syscall
        #breakline
        li $v0, 4
	la $a0, breakline
	syscall
	
	li $v0, 4
	la $a0, printNewScoreSelection
	syscall
	
	# Get the Y or N from user
        li $v0, 12
        syscall
        move $t2, $v0
	#if Y go to loop if N go to main
	beq $t2, 89, loop
	beq $t2, 78, main

        
b:	

	# Print the prompt
 	li $v0, 4
        la $a0, printgrade
        syscall
        #print B
        li $v0, 4
        la $a0, B
        syscall
        #breakline
        li $v0, 4
	la $a0, breakline
	syscall
	
	li $v0, 4
	la $a0, printNewScoreSelection
	syscall
	
	# Get the Y or N from user
        li $v0, 12
        syscall
        move $t2, $v0
	#if Y go to loop if N go to main
	beq $t2, 89, loop
	beq $t2, 78, main
	
	
c:	

	# Print the prompt
 	li $v0, 4
        la $a0, printgrade
        syscall
        #print C
        li $v0, 4
        la $a0, C
        syscall
        #breakline
        li $v0, 4
	la $a0, breakline
	syscall
	
	li $v0, 4
	la $a0, printNewScoreSelection
	syscall
	
	# Get the Y or N from user
        li $v0, 12
        syscall
        move $t2, $v0
	#if Y go to loop if N go to main
	beq $t2, 89, loop
	beq $t2, 78, main
	
	
d:

	# Print the prompt
 	li $v0, 4
        la $a0, printgrade
        syscall
        #print D
        li $v0, 4
        la $a0, D
        syscall
        #breakline
        li $v0, 4
	la $a0, breakline
	syscall
	
	li $v0, 4
	la $a0, printNewScoreSelection
	syscall
	
	# Get the Y or N from user
        li $v0, 12
        syscall
        move $t2, $v0
	#if Y go to loop if N go to main
	beq $t2, 89, loop
	beq $t2, 78, main
	
	
f:

	# Print the prompt
 	li $v0, 4
        la $a0, printgrade
        syscall
        #print F
        li $v0, 4
        la $a0, F
        syscall
        #breakline
        li $v0, 4
	la $a0, breakline
	syscall
	
	li $v0, 4
	la $a0, printNewScoreSelection
	syscall
	
	# Get the Y or N from user
        li $v0, 12
        syscall
        move $t2, $v0
	#if Y go to loop if N go to main
	beq $t2, 89, loop
	beq $t2, 78, main
                                                  
invalidgrade:
	#print out invalid input (less than 1 or grader than 100) 
	li $v0, 4
	la $a0, invalidgrade1
	syscall
	
	j loop
	#reprompt the user for valid input
	

invalid:
	#print out invalid input (less than 1 grader than 2) 
	li $v0, 4
	la $a0, invalidInput
	syscall
	
	j main
	#reprompt the user for valid input
	
	
	
exit: 
	# Print the exit sentence
 	li $v0, 4
        la $a0, printexit
        syscall
        #exit
	li $v0, 10
	syscall
